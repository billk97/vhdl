// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2018 23:15:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ergasia2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ergasia2_vlg_sample_tst(
	A,
	B,
	OpCode,
	sampler_tx
);
input [15:0] A;
input [15:0] B;
input [2:0] OpCode;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or OpCode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ergasia2_vlg_check_tst (
	Apotel,
	Apotelesma1,
	Apotelesma2,
	Apotelesma3,
	Apotelesma4,
	Apotelesma5,
	Apotelesma6,
	Apotelesma7,
	Apotelesma8,
	Apotelesma9,
	Apotelesma10,
	Apotelesma11,
	Apotelesma12,
	Apotelesma13,
	Apotelesma14,
	Apotelesma15,
	CarryOutTEL,
	sampler_rx
);
input  Apotel;
input  Apotelesma1;
input  Apotelesma2;
input  Apotelesma3;
input  Apotelesma4;
input  Apotelesma5;
input  Apotelesma6;
input  Apotelesma7;
input  Apotelesma8;
input  Apotelesma9;
input  Apotelesma10;
input  Apotelesma11;
input  Apotelesma12;
input  Apotelesma13;
input  Apotelesma14;
input  Apotelesma15;
input  CarryOutTEL;
input sampler_rx;

reg  Apotel_expected;
reg  Apotelesma1_expected;
reg  Apotelesma2_expected;
reg  Apotelesma3_expected;
reg  Apotelesma4_expected;
reg  Apotelesma5_expected;
reg  Apotelesma6_expected;
reg  Apotelesma7_expected;
reg  Apotelesma8_expected;
reg  Apotelesma9_expected;
reg  Apotelesma10_expected;
reg  Apotelesma11_expected;
reg  Apotelesma12_expected;
reg  Apotelesma13_expected;
reg  Apotelesma14_expected;
reg  Apotelesma15_expected;
reg  CarryOutTEL_expected;

reg  Apotel_prev;
reg  Apotelesma1_prev;
reg  Apotelesma2_prev;
reg  Apotelesma3_prev;
reg  Apotelesma4_prev;
reg  Apotelesma5_prev;
reg  Apotelesma6_prev;
reg  Apotelesma7_prev;
reg  Apotelesma8_prev;
reg  Apotelesma9_prev;
reg  Apotelesma10_prev;
reg  Apotelesma11_prev;
reg  Apotelesma12_prev;
reg  Apotelesma13_prev;
reg  Apotelesma14_prev;
reg  Apotelesma15_prev;
reg  CarryOutTEL_prev;

reg  Apotel_expected_prev;
reg  Apotelesma1_expected_prev;
reg  Apotelesma2_expected_prev;
reg  Apotelesma3_expected_prev;
reg  Apotelesma4_expected_prev;
reg  Apotelesma5_expected_prev;
reg  Apotelesma6_expected_prev;
reg  Apotelesma7_expected_prev;
reg  Apotelesma8_expected_prev;
reg  Apotelesma9_expected_prev;
reg  Apotelesma10_expected_prev;
reg  Apotelesma11_expected_prev;
reg  Apotelesma12_expected_prev;
reg  Apotelesma13_expected_prev;
reg  Apotelesma14_expected_prev;
reg  Apotelesma15_expected_prev;
reg  CarryOutTEL_expected_prev;

reg  last_Apotel_exp;
reg  last_Apotelesma1_exp;
reg  last_Apotelesma2_exp;
reg  last_Apotelesma3_exp;
reg  last_Apotelesma4_exp;
reg  last_Apotelesma5_exp;
reg  last_Apotelesma6_exp;
reg  last_Apotelesma7_exp;
reg  last_Apotelesma8_exp;
reg  last_Apotelesma9_exp;
reg  last_Apotelesma10_exp;
reg  last_Apotelesma11_exp;
reg  last_Apotelesma12_exp;
reg  last_Apotelesma13_exp;
reg  last_Apotelesma14_exp;
reg  last_Apotelesma15_exp;
reg  last_CarryOutTEL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	Apotel_prev = Apotel;
	Apotelesma1_prev = Apotelesma1;
	Apotelesma2_prev = Apotelesma2;
	Apotelesma3_prev = Apotelesma3;
	Apotelesma4_prev = Apotelesma4;
	Apotelesma5_prev = Apotelesma5;
	Apotelesma6_prev = Apotelesma6;
	Apotelesma7_prev = Apotelesma7;
	Apotelesma8_prev = Apotelesma8;
	Apotelesma9_prev = Apotelesma9;
	Apotelesma10_prev = Apotelesma10;
	Apotelesma11_prev = Apotelesma11;
	Apotelesma12_prev = Apotelesma12;
	Apotelesma13_prev = Apotelesma13;
	Apotelesma14_prev = Apotelesma14;
	Apotelesma15_prev = Apotelesma15;
	CarryOutTEL_prev = CarryOutTEL;
end

// update expected /o prevs

always @(trigger)
begin
	Apotel_expected_prev = Apotel_expected;
	Apotelesma1_expected_prev = Apotelesma1_expected;
	Apotelesma2_expected_prev = Apotelesma2_expected;
	Apotelesma3_expected_prev = Apotelesma3_expected;
	Apotelesma4_expected_prev = Apotelesma4_expected;
	Apotelesma5_expected_prev = Apotelesma5_expected;
	Apotelesma6_expected_prev = Apotelesma6_expected;
	Apotelesma7_expected_prev = Apotelesma7_expected;
	Apotelesma8_expected_prev = Apotelesma8_expected;
	Apotelesma9_expected_prev = Apotelesma9_expected;
	Apotelesma10_expected_prev = Apotelesma10_expected;
	Apotelesma11_expected_prev = Apotelesma11_expected;
	Apotelesma12_expected_prev = Apotelesma12_expected;
	Apotelesma13_expected_prev = Apotelesma13_expected;
	Apotelesma14_expected_prev = Apotelesma14_expected;
	Apotelesma15_expected_prev = Apotelesma15_expected;
	CarryOutTEL_expected_prev = CarryOutTEL_expected;
end



// expected Apotel
initial
begin
	Apotel_expected = 1'bX;
end 

// expected Apotelesma1
initial
begin
	Apotelesma1_expected = 1'bX;
end 

// expected Apotelesma2
initial
begin
	Apotelesma2_expected = 1'bX;
end 

// expected Apotelesma3
initial
begin
	Apotelesma3_expected = 1'bX;
end 

// expected Apotelesma4
initial
begin
	Apotelesma4_expected = 1'bX;
end 

// expected Apotelesma5
initial
begin
	Apotelesma5_expected = 1'bX;
end 

// expected Apotelesma6
initial
begin
	Apotelesma6_expected = 1'bX;
end 

// expected Apotelesma7
initial
begin
	Apotelesma7_expected = 1'bX;
end 

// expected Apotelesma8
initial
begin
	Apotelesma8_expected = 1'bX;
end 

// expected Apotelesma9
initial
begin
	Apotelesma9_expected = 1'bX;
end 

// expected Apotelesma10
initial
begin
	Apotelesma10_expected = 1'bX;
end 

// expected Apotelesma11
initial
begin
	Apotelesma11_expected = 1'bX;
end 

// expected Apotelesma12
initial
begin
	Apotelesma12_expected = 1'bX;
end 

// expected Apotelesma13
initial
begin
	Apotelesma13_expected = 1'bX;
end 

// expected Apotelesma14
initial
begin
	Apotelesma14_expected = 1'bX;
end 

// expected Apotelesma15
initial
begin
	Apotelesma15_expected = 1'bX;
end 

// expected CarryOutTEL
initial
begin
	CarryOutTEL_expected = 1'bX;
end 
// generate trigger
always @(Apotel_expected or Apotel or Apotelesma1_expected or Apotelesma1 or Apotelesma2_expected or Apotelesma2 or Apotelesma3_expected or Apotelesma3 or Apotelesma4_expected or Apotelesma4 or Apotelesma5_expected or Apotelesma5 or Apotelesma6_expected or Apotelesma6 or Apotelesma7_expected or Apotelesma7 or Apotelesma8_expected or Apotelesma8 or Apotelesma9_expected or Apotelesma9 or Apotelesma10_expected or Apotelesma10 or Apotelesma11_expected or Apotelesma11 or Apotelesma12_expected or Apotelesma12 or Apotelesma13_expected or Apotelesma13 or Apotelesma14_expected or Apotelesma14 or Apotelesma15_expected or Apotelesma15 or CarryOutTEL_expected or CarryOutTEL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Apotel = %b | expected Apotelesma1 = %b | expected Apotelesma2 = %b | expected Apotelesma3 = %b | expected Apotelesma4 = %b | expected Apotelesma5 = %b | expected Apotelesma6 = %b | expected Apotelesma7 = %b | expected Apotelesma8 = %b | expected Apotelesma9 = %b | expected Apotelesma10 = %b | expected Apotelesma11 = %b | expected Apotelesma12 = %b | expected Apotelesma13 = %b | expected Apotelesma14 = %b | expected Apotelesma15 = %b | expected CarryOutTEL = %b | ",Apotel_expected_prev,Apotelesma1_expected_prev,Apotelesma2_expected_prev,Apotelesma3_expected_prev,Apotelesma4_expected_prev,Apotelesma5_expected_prev,Apotelesma6_expected_prev,Apotelesma7_expected_prev,Apotelesma8_expected_prev,Apotelesma9_expected_prev,Apotelesma10_expected_prev,Apotelesma11_expected_prev,Apotelesma12_expected_prev,Apotelesma13_expected_prev,Apotelesma14_expected_prev,Apotelesma15_expected_prev,CarryOutTEL_expected_prev);
	$display("| real Apotel = %b | real Apotelesma1 = %b | real Apotelesma2 = %b | real Apotelesma3 = %b | real Apotelesma4 = %b | real Apotelesma5 = %b | real Apotelesma6 = %b | real Apotelesma7 = %b | real Apotelesma8 = %b | real Apotelesma9 = %b | real Apotelesma10 = %b | real Apotelesma11 = %b | real Apotelesma12 = %b | real Apotelesma13 = %b | real Apotelesma14 = %b | real Apotelesma15 = %b | real CarryOutTEL = %b | ",Apotel_prev,Apotelesma1_prev,Apotelesma2_prev,Apotelesma3_prev,Apotelesma4_prev,Apotelesma5_prev,Apotelesma6_prev,Apotelesma7_prev,Apotelesma8_prev,Apotelesma9_prev,Apotelesma10_prev,Apotelesma11_prev,Apotelesma12_prev,Apotelesma13_prev,Apotelesma14_prev,Apotelesma15_prev,CarryOutTEL_prev);
`endif
	if (
		( Apotel_expected_prev !== 1'bx ) && ( Apotel_prev !== Apotel_expected_prev )
		&& ((Apotel_expected_prev !== last_Apotel_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotel_expected_prev);
		$display ("     Real value = %b", Apotel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Apotel_exp = Apotel_expected_prev;
	end
	if (
		( Apotelesma1_expected_prev !== 1'bx ) && ( Apotelesma1_prev !== Apotelesma1_expected_prev )
		&& ((Apotelesma1_expected_prev !== last_Apotelesma1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma1_expected_prev);
		$display ("     Real value = %b", Apotelesma1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Apotelesma1_exp = Apotelesma1_expected_prev;
	end
	if (
		( Apotelesma2_expected_prev !== 1'bx ) && ( Apotelesma2_prev !== Apotelesma2_expected_prev )
		&& ((Apotelesma2_expected_prev !== last_Apotelesma2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma2_expected_prev);
		$display ("     Real value = %b", Apotelesma2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Apotelesma2_exp = Apotelesma2_expected_prev;
	end
	if (
		( Apotelesma3_expected_prev !== 1'bx ) && ( Apotelesma3_prev !== Apotelesma3_expected_prev )
		&& ((Apotelesma3_expected_prev !== last_Apotelesma3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma3_expected_prev);
		$display ("     Real value = %b", Apotelesma3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Apotelesma3_exp = Apotelesma3_expected_prev;
	end
	if (
		( Apotelesma4_expected_prev !== 1'bx ) && ( Apotelesma4_prev !== Apotelesma4_expected_prev )
		&& ((Apotelesma4_expected_prev !== last_Apotelesma4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma4_expected_prev);
		$display ("     Real value = %b", Apotelesma4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Apotelesma4_exp = Apotelesma4_expected_prev;
	end
	if (
		( Apotelesma5_expected_prev !== 1'bx ) && ( Apotelesma5_prev !== Apotelesma5_expected_prev )
		&& ((Apotelesma5_expected_prev !== last_Apotelesma5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma5_expected_prev);
		$display ("     Real value = %b", Apotelesma5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Apotelesma5_exp = Apotelesma5_expected_prev;
	end
	if (
		( Apotelesma6_expected_prev !== 1'bx ) && ( Apotelesma6_prev !== Apotelesma6_expected_prev )
		&& ((Apotelesma6_expected_prev !== last_Apotelesma6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma6_expected_prev);
		$display ("     Real value = %b", Apotelesma6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Apotelesma6_exp = Apotelesma6_expected_prev;
	end
	if (
		( Apotelesma7_expected_prev !== 1'bx ) && ( Apotelesma7_prev !== Apotelesma7_expected_prev )
		&& ((Apotelesma7_expected_prev !== last_Apotelesma7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma7_expected_prev);
		$display ("     Real value = %b", Apotelesma7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Apotelesma7_exp = Apotelesma7_expected_prev;
	end
	if (
		( Apotelesma8_expected_prev !== 1'bx ) && ( Apotelesma8_prev !== Apotelesma8_expected_prev )
		&& ((Apotelesma8_expected_prev !== last_Apotelesma8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma8_expected_prev);
		$display ("     Real value = %b", Apotelesma8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Apotelesma8_exp = Apotelesma8_expected_prev;
	end
	if (
		( Apotelesma9_expected_prev !== 1'bx ) && ( Apotelesma9_prev !== Apotelesma9_expected_prev )
		&& ((Apotelesma9_expected_prev !== last_Apotelesma9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma9_expected_prev);
		$display ("     Real value = %b", Apotelesma9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Apotelesma9_exp = Apotelesma9_expected_prev;
	end
	if (
		( Apotelesma10_expected_prev !== 1'bx ) && ( Apotelesma10_prev !== Apotelesma10_expected_prev )
		&& ((Apotelesma10_expected_prev !== last_Apotelesma10_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma10_expected_prev);
		$display ("     Real value = %b", Apotelesma10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Apotelesma10_exp = Apotelesma10_expected_prev;
	end
	if (
		( Apotelesma11_expected_prev !== 1'bx ) && ( Apotelesma11_prev !== Apotelesma11_expected_prev )
		&& ((Apotelesma11_expected_prev !== last_Apotelesma11_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma11_expected_prev);
		$display ("     Real value = %b", Apotelesma11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Apotelesma11_exp = Apotelesma11_expected_prev;
	end
	if (
		( Apotelesma12_expected_prev !== 1'bx ) && ( Apotelesma12_prev !== Apotelesma12_expected_prev )
		&& ((Apotelesma12_expected_prev !== last_Apotelesma12_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma12_expected_prev);
		$display ("     Real value = %b", Apotelesma12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Apotelesma12_exp = Apotelesma12_expected_prev;
	end
	if (
		( Apotelesma13_expected_prev !== 1'bx ) && ( Apotelesma13_prev !== Apotelesma13_expected_prev )
		&& ((Apotelesma13_expected_prev !== last_Apotelesma13_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma13_expected_prev);
		$display ("     Real value = %b", Apotelesma13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_Apotelesma13_exp = Apotelesma13_expected_prev;
	end
	if (
		( Apotelesma14_expected_prev !== 1'bx ) && ( Apotelesma14_prev !== Apotelesma14_expected_prev )
		&& ((Apotelesma14_expected_prev !== last_Apotelesma14_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma14_expected_prev);
		$display ("     Real value = %b", Apotelesma14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Apotelesma14_exp = Apotelesma14_expected_prev;
	end
	if (
		( Apotelesma15_expected_prev !== 1'bx ) && ( Apotelesma15_prev !== Apotelesma15_expected_prev )
		&& ((Apotelesma15_expected_prev !== last_Apotelesma15_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Apotelesma15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Apotelesma15_expected_prev);
		$display ("     Real value = %b", Apotelesma15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Apotelesma15_exp = Apotelesma15_expected_prev;
	end
	if (
		( CarryOutTEL_expected_prev !== 1'bx ) && ( CarryOutTEL_prev !== CarryOutTEL_expected_prev )
		&& ((CarryOutTEL_expected_prev !== last_CarryOutTEL_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CarryOutTEL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CarryOutTEL_expected_prev);
		$display ("     Real value = %b", CarryOutTEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_CarryOutTEL_exp = CarryOutTEL_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ergasia2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg [15:0] B;
reg [2:0] OpCode;
// wires                                               
wire Apotel;
wire Apotelesma1;
wire Apotelesma2;
wire Apotelesma3;
wire Apotelesma4;
wire Apotelesma5;
wire Apotelesma6;
wire Apotelesma7;
wire Apotelesma8;
wire Apotelesma9;
wire Apotelesma10;
wire Apotelesma11;
wire Apotelesma12;
wire Apotelesma13;
wire Apotelesma14;
wire Apotelesma15;
wire CarryOutTEL;

wire sampler;                             

// assign statements (if any)                          
ergasia2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.Apotel(Apotel),
	.Apotelesma1(Apotelesma1),
	.Apotelesma2(Apotelesma2),
	.Apotelesma3(Apotelesma3),
	.Apotelesma4(Apotelesma4),
	.Apotelesma5(Apotelesma5),
	.Apotelesma6(Apotelesma6),
	.Apotelesma7(Apotelesma7),
	.Apotelesma8(Apotelesma8),
	.Apotelesma9(Apotelesma9),
	.Apotelesma10(Apotelesma10),
	.Apotelesma11(Apotelesma11),
	.Apotelesma12(Apotelesma12),
	.Apotelesma13(Apotelesma13),
	.Apotelesma14(Apotelesma14),
	.Apotelesma15(Apotelesma15),
	.B(B),
	.CarryOutTEL(CarryOutTEL),
	.OpCode(OpCode)
);
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 
// OpCode[ 2 ]
initial
begin
	OpCode[2] = 1'b0;
end 
// OpCode[ 1 ]
initial
begin
	OpCode[1] = 1'b0;
end 
// OpCode[ 0 ]
initial
begin
	OpCode[0] = 1'b0;
end 

ergasia2_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.OpCode(OpCode),
	.sampler_tx(sampler)
);

ergasia2_vlg_check_tst tb_out(
	.Apotel(Apotel),
	.Apotelesma1(Apotelesma1),
	.Apotelesma2(Apotelesma2),
	.Apotelesma3(Apotelesma3),
	.Apotelesma4(Apotelesma4),
	.Apotelesma5(Apotelesma5),
	.Apotelesma6(Apotelesma6),
	.Apotelesma7(Apotelesma7),
	.Apotelesma8(Apotelesma8),
	.Apotelesma9(Apotelesma9),
	.Apotelesma10(Apotelesma10),
	.Apotelesma11(Apotelesma11),
	.Apotelesma12(Apotelesma12),
	.Apotelesma13(Apotelesma13),
	.Apotelesma14(Apotelesma14),
	.Apotelesma15(Apotelesma15),
	.CarryOutTEL(CarryOutTEL),
	.sampler_rx(sampler)
);
endmodule

